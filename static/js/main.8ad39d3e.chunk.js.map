{"version":3,"sources":["App.js","actions/contactAction.js","actions/actionTypes.js","serviceWorker.js","store/configureStore.js","reducers/index.js","reducers/contactReducer.js","index.js"],"names":["connect","state","X","contacts","dispatch","createContact","contact","type","contactAction","deleteContact","index","id","props","useState","name","setName","e","preventDefault","className","onSubmit","onChange","target","value","map","i","data","key","onClick","Boolean","window","location","hostname","match","initialState","combineReducers","Object","assign","filter","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAiFeA,eAbS,SAACC,EAAOC,GAC9B,MAAO,CACLC,SAAUF,EAAME,aAIO,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACC,GAAD,OAAaF,EC3EH,SAACE,GAC5B,MAAO,CACLC,KCF8B,qBDG9BD,WDwEqCE,CAA4BF,KACjEG,cAAe,SAACC,GAAD,OAAWN,ECpErB,CACLG,KCR0B,iBDS1BI,GDkE+DD,QAIpDV,EA7EH,SAACY,GAAW,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KAgCfN,EAAgB,SAACO,EAAGN,GACxBM,EAAEC,iBACFL,EAAMH,cAAcC,IAGtB,OACE,yBAAKQ,UAAU,aACb,yDACA,6BACA,6BACE,gDACA,0BAAMC,SAtCS,SAACH,GACpBA,EAAEC,iBACF,IAAIX,EAAU,CACZQ,QAEFC,EAAQ,IACRH,EAAMP,cAAcC,KAiCd,2BACEC,KAAK,OACLa,SA3CW,SAACJ,GAAD,OAAOD,EAAQC,EAAEK,OAAOC,QA4CnCJ,UAAU,eACVI,MAAOR,IAET,6BACA,2BAAOP,KAAK,SAASW,UAAU,kBAAkBI,MAAM,SAEzD,6BAEE,wBAAIJ,UAAU,cACXN,EAAMT,SAASoB,KAAI,SAACjB,EAASkB,GAAV,OA1CZC,EA0CqCnB,EA1C/BI,EA0CwCc,EAzC9D,yBAAKN,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIQ,IAAKhB,EAAOQ,UAAU,4BACvBO,EAAKX,OAGV,yBAAKI,UAAU,YACb,4BACES,QAAS,SAACX,GAAD,OAAOP,EAAcO,EAAGN,IACjCQ,UAAU,kBAFZ,YARW,IAACO,EAAMf,WGNNkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICfyBC,E,eCAhBC,cAAgB,CAC7B/B,SCFa,WAAwC,IAAvCF,EAAsC,uDAA9B,GAA8B,yCAAxBK,EAAwB,EAAxBA,QAASK,EAAe,EAAfA,GAAIJ,EAAW,EAAXA,KACzC,OAAQA,GACN,IJH8B,qBII5B,MAAM,GAAN,mBAAWN,GAAX,CAAkBkC,OAAOC,OAAO,GAAI9B,KACtC,IJJ0B,iBIKxB,OAAOL,EAAMoC,QAAO,SAACZ,EAAMD,GAAP,OAAaA,IAAMb,KACzC,QACE,OAAOV,MCFPqC,EHHJC,YAAYC,EAAaP,GGK3BQ,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ad39d3e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as contactAction from \"./actions/contactAction\";\r\n\r\nconst App = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const handleChange = (e) => setName(e.target.value);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let contact = {\r\n      name,\r\n    };\r\n    setName(\"\");\r\n    props.createContact(contact);\r\n  };\r\n\r\n  const listView = (data, index) => (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-10\">\r\n        <li key={index} className=\"list-group-item clearfix\">\r\n          {data.name}\r\n        </li>\r\n      </div>\r\n      <div className=\"col-md-2\">\r\n        <button\r\n          onClick={(e) => deleteContact(e, index)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const deleteContact = (e, index) => {\r\n    e.preventDefault();\r\n    props.deleteContact(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Simple Redux Contact List</h1>\r\n      <hr />\r\n      <div>\r\n        <h3>Add Contact here</h3>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            className=\"form-control\"\r\n            value={name}\r\n          />\r\n          <br />\r\n          <input type=\"submit\" className=\"btn btn-success\" value=\"ADD\" />\r\n        </form>\r\n        <hr />\r\n        {\r\n          <ul className=\"list-group\">\r\n            {props.contacts.map((contact, i) => listView(contact, i))}\r\n          </ul>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, X) => {\r\n  return {\r\n    contacts: state.contacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    createContact: (contact) => dispatch(contactAction.createContact(contact)),\r\n    deleteContact: (index) => dispatch(contactAction.deleteContact(index)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as actionTypes from \"./actionTypes\";\r\nexport const createContact = (contact) => {\r\n  return {\r\n    type: actionTypes.CREATE_NEW_CONTACT,\r\n    contact,\r\n  };\r\n};\r\n\r\nexport const deleteContact = (id) => {\r\n  return {\r\n    type: actionTypes.REMOVE_CONTACT,\r\n    id,\r\n  };\r\n};\r\n","export const GET_ALL_CONTACTS = \"GET_ALL_CONTACTS\";\r\nexport const CREATE_NEW_CONTACT = \"CREATE_NEW_CONTACT\";\r\nexport const REMOVE_CONTACT = \"REMOVE_CONTACT\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nexport const configureStore = (initialState) =>\r\n  createStore(rootReducer, initialState);\r\n","import { combineReducers } from \"redux\";\r\nimport contacts from \"./contactReducer\";\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n});\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nexport default (state = [], { contact, id, type }) => {\r\n  switch (type) {\r\n    case actionTypes.CREATE_NEW_CONTACT:\r\n      return [...state, Object.assign({}, contact)];\r\n    case actionTypes.REMOVE_CONTACT:\r\n      return state.filter((data, i) => i !== id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}